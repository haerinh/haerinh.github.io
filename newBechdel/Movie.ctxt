#BlueJ class context
comment0.target=Movie
comment0.text=\n\ Represents\ an\ object\ of\ type\ Movie.\n\ A\ Movie\ object\ has\ a\ title,\ some\ Actors,\ and\ results\ for\ the\ twelve\ Bechdel\ tests.\n\n\ @author\ Hae\ Rin\ Hong,\ Alejandra\ Robayo,\ Nile\ Rankin-Watson\n\ @version\ (9\ Dec\ 2022,\ 11\:44am)\n
comment1.params=t
comment1.target=Movie(java.lang.String)
comment1.text=\n\ Constructor\ for\ movie\ class\ \n\ @param\ t\ title\ for\ this\ movie\n
comment10.params=
comment10.target=java.util.Hashtable\ getAllActors()
comment10.text=\n\ Retrieves\ the\ movie's\ actors\ in\ a\ hashtable\n\ @return\ a\ hashtable\ containing\ the\ actors\ in\ the\ movie\n
comment11.params=
comment11.target=int\ feministScore()
comment11.text=\n\ Returns\ the\ movie's\ feminist\ score\n\ @return\ -\ a\ String\ representation\ of\ the\ movie\ information.\ \ \n
comment12.params=
comment12.target=java.lang.String\ toString()
comment12.text=\n\ Returns\ a\ string\ representation\ of\ the\ movie\n\ @return\ -\ a\ String\ representation\ of\ the\ movie\ information.\ \ \n
comment13.params=
comment13.target=int\ getFeministScore()
comment13.text=\n\ Retrieves\ feminist\ score\ for\ this\ movie\n\ @return\ the\ feminist\ score\ for\ this\ movie\n
comment14.params=args
comment14.target=void\ main(java.lang.String[])
comment14.text=\n\ Main\ method\ for\ testing\ in\ movie\ class\n
comment2.params=m
comment2.target=int\ compareTo(Movie)
comment2.text=\n\ Compares\ movies\ to\ one\ another\n\ @return\ 1\ if\ the\ feministScore()\ of\ movie\ is\ larger\ than\ the\ feministScore()\ of\ input\ movie,\ \n\ \ \ \ \ \ \ \ \ -1\ if\ the\ feministScore()\ this\ movie\ is\ smaller,\ \n\ \ \ \ \ \ \ \ \ 0\ otherwise.\ \n
comment3.params=
comment3.target=java.lang.String\ getTitle()
comment3.text=\n\ Retrieves\ title\ of\ movie\n\ @return\ title\ of\ movie\n
comment4.params=actorsFile
comment4.target=void\ addAllActors(java.lang.String)
comment4.text=\n\ Reads\ the\ input\ file\ ("nextBechdel_castGender.txt"),\ and\ adds\ all\ its\ Actors\ to\ this\ movie.\n\ \n
comment5.params=line
comment5.target=Actor\ addOneActor(java.lang.String)
comment5.text=\n\ Adds\ one\ actor\ to\ movie\ class\n\ @param\ line\ string\ containing\ information\ on\ the\ actor\n\ @return\ the\ actor\ that\ was\ just\ added\n
comment6.params=other
comment6.target=boolean\ equals(java.lang.Object)
comment6.text=\n\ Tests\ this\ movie\ object\ with\ the\ input\ one\ and\ determines\ whether\ they\ are\ equal.\n\ \n\ @return\ true\ if\ both\ objects\ are\ movies\ and\ have\ the\ same\ title,\ \n\ false\ in\ any\ other\ case.\n
comment7.params=newResults
comment7.target=void\ setTestResults(java.lang.String)
comment7.text=\n\ Populates\ results\ vector\n\ @param\ results\ String\ containing\ test\ results\n
comment8.params=
comment8.target=java.util.Vector\ getAllTestResults()
comment8.text=\n\ Retrieves\ all\ test\ results\ for\ movie\n\ @return\ the\ results\ vector\ for\ the\ movie\n
comment9.params=
comment9.target=java.util.LinkedList\ getActors()
comment9.text=\n\ Retrieves\ all\ actors\ in\ a\ linked\ list\n\ @return\ a\ linked\ list\ of\ strings\ containing\ the\ names\ of\ actors\ in\ the\ movie\n
numComments=15
